/*
 * This file is generated by jOOQ.
 */
package com.adverity.challenge.adverity.database.tables;


import com.adverity.challenge.adverity.database.Keys;
import com.adverity.challenge.adverity.database.Public;
import com.adverity.challenge.adverity.database.tables.records.MetricsFactRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MetricsFact extends TableImpl<MetricsFactRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.metrics_fact</code>
     */
    public static final MetricsFact METRICS_FACT = new MetricsFact();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MetricsFactRecord> getRecordType() {
        return MetricsFactRecord.class;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public final TableField<MetricsFactRecord, Object> ID = createField(DSL.name("id"), SQLDataType.OTHER, this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public final TableField<MetricsFactRecord, Object> FACTID = createField(DSL.name("factid"), SQLDataType.OTHER, this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public final TableField<MetricsFactRecord, Object> METRICID = createField(DSL.name("metricid"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>public.metrics_fact.value</code>.
     */
    public final TableField<MetricsFactRecord, BigDecimal> VALUE = createField(DSL.name("value"), SQLDataType.NUMERIC(20, 10), this, "");

    private MetricsFact(Name alias, Table<MetricsFactRecord> aliased) {
        this(alias, aliased, null);
    }

    private MetricsFact(Name alias, Table<MetricsFactRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.metrics_fact</code> table reference
     */
    public MetricsFact(String alias) {
        this(DSL.name(alias), METRICS_FACT);
    }

    /**
     * Create an aliased <code>public.metrics_fact</code> table reference
     */
    public MetricsFact(Name alias) {
        this(alias, METRICS_FACT);
    }

    /**
     * Create a <code>public.metrics_fact</code> table reference
     */
    public MetricsFact() {
        this(DSL.name("metrics_fact"), null);
    }

    public <O extends Record> MetricsFact(Table<O> child, ForeignKey<O, MetricsFactRecord> key) {
        super(child, key, METRICS_FACT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<MetricsFactRecord> getPrimaryKey() {
        return Keys.PK_METRICS_FACT;
    }

    @Override
    public List<UniqueKey<MetricsFactRecord>> getKeys() {
        return Arrays.<UniqueKey<MetricsFactRecord>>asList(Keys.PK_METRICS_FACT);
    }

    @Override
    public MetricsFact as(String alias) {
        return new MetricsFact(DSL.name(alias), this);
    }

    @Override
    public MetricsFact as(Name alias) {
        return new MetricsFact(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MetricsFact rename(String name) {
        return new MetricsFact(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MetricsFact rename(Name name) {
        return new MetricsFact(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Object, Object, Object, BigDecimal> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
