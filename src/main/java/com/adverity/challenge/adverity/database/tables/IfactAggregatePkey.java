/*
 * This file is generated by jOOQ.
 */
package com.adverity.challenge.adverity.database.tables;


import com.adverity.challenge.adverity.database.Public;
import com.adverity.challenge.adverity.database.tables.records.IfactAggregatePkeyRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IfactAggregatePkey extends TableImpl<IfactAggregatePkeyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.ifact_aggregate_pkey</code>
     */
    public static final IfactAggregatePkey IFACT_AGGREGATE_PKEY = new IfactAggregatePkey();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IfactAggregatePkeyRecord> getRecordType() {
        return IfactAggregatePkeyRecord.class;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public final TableField<IfactAggregatePkeyRecord, Object> ID = createField(DSL.name("id"), SQLDataType.OTHER, this, "");

    private IfactAggregatePkey(Name alias, Table<IfactAggregatePkeyRecord> aliased) {
        this(alias, aliased, null);
    }

    private IfactAggregatePkey(Name alias, Table<IfactAggregatePkeyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.ifact_aggregate_pkey</code> table reference
     */
    public IfactAggregatePkey(String alias) {
        this(DSL.name(alias), IFACT_AGGREGATE_PKEY);
    }

    /**
     * Create an aliased <code>public.ifact_aggregate_pkey</code> table reference
     */
    public IfactAggregatePkey(Name alias) {
        this(alias, IFACT_AGGREGATE_PKEY);
    }

    /**
     * Create a <code>public.ifact_aggregate_pkey</code> table reference
     */
    public IfactAggregatePkey() {
        this(DSL.name("ifact_aggregate_pkey"), null);
    }

    public <O extends Record> IfactAggregatePkey(Table<O> child, ForeignKey<O, IfactAggregatePkeyRecord> key) {
        super(child, key, IFACT_AGGREGATE_PKEY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public IfactAggregatePkey as(String alias) {
        return new IfactAggregatePkey(DSL.name(alias), this);
    }

    @Override
    public IfactAggregatePkey as(Name alias) {
        return new IfactAggregatePkey(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IfactAggregatePkey rename(String name) {
        return new IfactAggregatePkey(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IfactAggregatePkey rename(Name name) {
        return new IfactAggregatePkey(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<Object> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
