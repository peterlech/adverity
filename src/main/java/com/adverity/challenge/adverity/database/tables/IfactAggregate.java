/*
 * This file is generated by jOOQ.
 */
package com.adverity.challenge.adverity.database.tables;


import com.adverity.challenge.adverity.database.Keys;
import com.adverity.challenge.adverity.database.Public;
import com.adverity.challenge.adverity.database.tables.records.IfactAggregateRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IfactAggregate extends TableImpl<IfactAggregateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.ifact_aggregate</code>
     */
    public static final IfactAggregate IFACT_AGGREGATE = new IfactAggregate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IfactAggregateRecord> getRecordType() {
        return IfactAggregateRecord.class;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public final TableField<IfactAggregateRecord, Object> ID = createField(DSL.name("id"), SQLDataType.OTHER, this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public final TableField<IfactAggregateRecord, Object> DATASOURCEID = createField(DSL.name("datasourceid"), SQLDataType.OTHER, this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public final TableField<IfactAggregateRecord, Object> CAMPAIGNID = createField(DSL.name("campaignid"), SQLDataType.OTHER, this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public final TableField<IfactAggregateRecord, Object> CALENDARID = createField(DSL.name("calendarid"), SQLDataType.OTHER, this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public final TableField<IfactAggregateRecord, Object> AGGREGATEID = createField(DSL.name("aggregateid"), SQLDataType.OTHER, this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public final TableField<IfactAggregateRecord, Object> METRICID = createField(DSL.name("metricid"), SQLDataType.OTHER, this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public final TableField<IfactAggregateRecord, Object> VALUE = createField(DSL.name("value"), SQLDataType.OTHER, this, "");

    private IfactAggregate(Name alias, Table<IfactAggregateRecord> aliased) {
        this(alias, aliased, null);
    }

    private IfactAggregate(Name alias, Table<IfactAggregateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.ifact_aggregate</code> table reference
     */
    public IfactAggregate(String alias) {
        this(DSL.name(alias), IFACT_AGGREGATE);
    }

    /**
     * Create an aliased <code>public.ifact_aggregate</code> table reference
     */
    public IfactAggregate(Name alias) {
        this(alias, IFACT_AGGREGATE);
    }

    /**
     * Create a <code>public.ifact_aggregate</code> table reference
     */
    public IfactAggregate() {
        this(DSL.name("ifact_aggregate"), null);
    }

    public <O extends Record> IfactAggregate(Table<O> child, ForeignKey<O, IfactAggregateRecord> key) {
        super(child, key, IFACT_AGGREGATE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<IfactAggregateRecord> getPrimaryKey() {
        return Keys.PK_IFACT_AGGREGATE;
    }

    @Override
    public List<UniqueKey<IfactAggregateRecord>> getKeys() {
        return Arrays.<UniqueKey<IfactAggregateRecord>>asList(Keys.PK_IFACT_AGGREGATE);
    }

    @Override
    public IfactAggregate as(String alias) {
        return new IfactAggregate(DSL.name(alias), this);
    }

    @Override
    public IfactAggregate as(Name alias) {
        return new IfactAggregate(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IfactAggregate rename(String name) {
        return new IfactAggregate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IfactAggregate rename(Name name) {
        return new IfactAggregate(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Object, Object, Object, Object, Object, Object, Object> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
