/*
 * This file is generated by jOOQ.
 */
package com.adverity.challenge.adverity.database.tables;


import com.adverity.challenge.adverity.database.Public;
import com.adverity.challenge.adverity.database.tables.records.IfactAggregateViewRecord;

import java.math.BigDecimal;
import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IfactAggregateView extends TableImpl<IfactAggregateViewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.ifact_aggregate_view</code>
     */
    public static final IfactAggregateView IFACT_AGGREGATE_VIEW = new IfactAggregateView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IfactAggregateViewRecord> getRecordType() {
        return IfactAggregateViewRecord.class;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public final TableField<IfactAggregateViewRecord, Object> ID = createField(DSL.name("id"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>public.ifact_aggregate_view.datasource</code>.
     */
    public final TableField<IfactAggregateViewRecord, String> DATASOURCE = createField(DSL.name("datasource"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.ifact_aggregate_view.daily</code>.
     */
    public final TableField<IfactAggregateViewRecord, LocalDate> DAILY = createField(DSL.name("daily"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.ifact_aggregate_view.campaign</code>.
     */
    public final TableField<IfactAggregateViewRecord, String> CAMPAIGN = createField(DSL.name("campaign"), SQLDataType.VARCHAR(255), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public final TableField<IfactAggregateViewRecord, Object> AGGREGATEID = createField(DSL.name("aggregateid"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>public.ifact_aggregate_view.aggregate</code>.
     */
    public final TableField<IfactAggregateViewRecord, String> AGGREGATE = createField(DSL.name("aggregate"), SQLDataType.VARCHAR(100), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public final TableField<IfactAggregateViewRecord, Object> METRICID = createField(DSL.name("metricid"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>public.ifact_aggregate_view.metric</code>.
     */
    public final TableField<IfactAggregateViewRecord, String> METRIC = createField(DSL.name("metric"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.ifact_aggregate_view.value</code>.
     */
    public final TableField<IfactAggregateViewRecord, BigDecimal> VALUE = createField(DSL.name("value"), SQLDataType.NUMERIC(20, 10), this, "");

    private IfactAggregateView(Name alias, Table<IfactAggregateViewRecord> aliased) {
        this(alias, aliased, null);
    }

    private IfactAggregateView(Name alias, Table<IfactAggregateViewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view());
    }

    /**
     * Create an aliased <code>public.ifact_aggregate_view</code> table reference
     */
    public IfactAggregateView(String alias) {
        this(DSL.name(alias), IFACT_AGGREGATE_VIEW);
    }

    /**
     * Create an aliased <code>public.ifact_aggregate_view</code> table reference
     */
    public IfactAggregateView(Name alias) {
        this(alias, IFACT_AGGREGATE_VIEW);
    }

    /**
     * Create a <code>public.ifact_aggregate_view</code> table reference
     */
    public IfactAggregateView() {
        this(DSL.name("ifact_aggregate_view"), null);
    }

    public <O extends Record> IfactAggregateView(Table<O> child, ForeignKey<O, IfactAggregateViewRecord> key) {
        super(child, key, IFACT_AGGREGATE_VIEW);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public IfactAggregateView as(String alias) {
        return new IfactAggregateView(DSL.name(alias), this);
    }

    @Override
    public IfactAggregateView as(Name alias) {
        return new IfactAggregateView(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IfactAggregateView rename(String name) {
        return new IfactAggregateView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IfactAggregateView rename(Name name) {
        return new IfactAggregateView(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Object, String, LocalDate, String, Object, String, Object, String, BigDecimal> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
